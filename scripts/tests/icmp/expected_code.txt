#ifndef ICMP_GEN_H_
#define ICMP_GEN_H_

void fill_icmp_dest_unreachable_receiver(
    Destination_Unreachable_Message_hdr *hdr, uint16_t length, int code_value,
    proto_ptr_t *ptrs) {
  char *payload = (char *) (hdr + 1);
  // The source network and address from the original datagram's data.
  copy(&payload, (char *) ptrs->ip_ptr, 28);

  // Set type to 3
  hdr->type = 3;

  // 0 = net unreachable;
  // 1 = host unreachable;
  // 2 = protocol unreachable;
  // 3 = port unreachable;
  // 4 = fragmentation needed and DF set;
  // 5 = source route failed.
  hdr->code = code_value;

  // appropriate_process handle(s) this_data
  /* host use this_data */
  // For computing the checksum , the checksum field should be zero
  hdr->checksum = 0;

  // The checksum is the 16-bit one's complement of the one's complement sum of
  // the ICMP message starting with the ICMP Type
  hdr->checksum = u16bit_ones_complement(
      ones_complement_sum((const void *) &hdr->type, length));
}

void fill_icmp_echo_receiver(Echo_or_Echo_Reply_Message_hdr *hdr,
                             uint16_t length, int type_value) {
  char *data = (char *) (hdr + 1);
  // Set code to 0
  hdr->code = 0;

  // 0 for echo reply message.
  hdr->type = type_value;

  // For computing the checksum , the checksum field should be zero
  hdr->checksum = 0;

  // For computing the checksum, if the total length is odd, the received data
  // is padded with one octet of zeros
  if (isodd(length)) {
    pad(&data, sizeof(*data), 0, 1);
    length += 1;
  }

  // The checksum is the 16-bit one's complement of the one's complement sum of
  // the ICMP message starting with the ICMP Type
  hdr->checksum = u16bit_ones_complement(
      ones_complement_sum((const void *) &hdr->type, length));
}

void fill_icmp_echo_sender(Echo_or_Echo_Reply_Message_hdr *hdr, uint16_t length,
                           int type_value) {
  char *data = (char *) (hdr + 1);
  // 8 for echo message;
  // 0 for echo reply message.
  hdr->type = type_value;

  // Set code to 0
  hdr->code = 0;

  // For echo message, if code equals 0, an identifier may be zero to help match
  // echos and replies.
  if (hdr->code == 0) {
    hdr->identifier = 0;
  }

  // For echo message, if code equals 0, a sequence number may be zero to help
  // match echos and replies.
  if (hdr->code == 0) {
    hdr->sequence_number = 0;
  }

  // For computing the checksum , the checksum field should be zero
  hdr->checksum = 0;

  // For computing the checksum, if the total length is odd, the received data
  // is padded with one octet of zeros
  if (isodd(length)) {
    pad(&data, sizeof(*data), 0, 1);
    length += 1;
  }

  // The checksum is the 16-bit one's complement of the one's complement sum of
  // the ICMP message starting with the ICMP Type
  hdr->checksum = u16bit_ones_complement(
      ones_complement_sum((const void *) &hdr->type, length));
}

void fill_icmp_info_receiver(
    Information_Request_or_Information_Reply_Message_hdr *hdr, uint16_t length,
    int type_value) {
  // 15 for information request message;
  // 16 for information reply message.
  hdr->type = type_value;

  // Set code to 0
  hdr->code = 0;

  // For information request message, if code equals 0, an identifier may be
  // zero to help match request and replies.
  if (hdr->code == 0) {
    hdr->identifier = 0;
  }

  // For information request message, if code equals 0, a sequence number may be
  // zero to help match request and replies.
  if (hdr->code == 0) {
    hdr->sequence_number = 0;
  }

  // For computing the checksum , the checksum field should be zero
  hdr->checksum = 0;

  // The checksum is the 16-bit one's complement of the one's complement sum of
  // the ICMP message starting with the ICMP Type
  hdr->checksum = u16bit_ones_complement(
      ones_complement_sum((const void *) &hdr->type, length));
}

void fill_icmp_para_prob_receiver(Parameter_Problem_Message_hdr *hdr,
                                  uint16_t length, proto_ptr_t *ptrs) {
  char *payload = (char *) (hdr + 1);
  // The source network and address from the original datagram's data.
  copy(&payload, (char *) ptrs->ip_ptr, 28);

  // Set type to 12
  hdr->type = 12;

  // 0 = pointer indicates the error.
  hdr->code = 0;

  // appropriate_process handle(s) this_data
  /* host use this_data */
  // For computing the checksum , the checksum field should be zero
  hdr->checksum = 0;

  // The checksum is the 16-bit one's complement of the one's complement sum of
  // the ICMP message starting with the ICMP Type
  hdr->checksum = u16bit_ones_complement(
      ones_complement_sum((const void *) &hdr->type, length));
}

void fill_icmp_redir_receiver(Redirect_Message_hdr *hdr, uint16_t length,
                              int code_value, proto_ptr_t *ptrs) {
  char *payload = (char *) (hdr + 1);
  // The source network and address of the original datagram's data.
  copy(&payload, (char *) ptrs->ip_ptr, 28);

  // Set type to 5
  hdr->type = 5;

  // 0 = Redirect datagrams for the Network.
  // 1 = Redirect datagrams for the Host.
  // 2 = Redirect datagrams for the Type of Service and Network.
  // 3 = Redirect datagrams for the Type of Service and Host.
  hdr->code = code_value;

  // appropriate_process handle(s) this_data
  /* host use this_data */
  // For computing the checksum , the checksum field should be zero
  hdr->checksum = 0;

  // The checksum is the 16-bit one's complement of the one's complement sum of
  // the ICMP message starting with the ICMP Type
  hdr->checksum = u16bit_ones_complement(
      ones_complement_sum((const void *) &hdr->type, length));
}

void fill_icmp_source_quench_receiver(Source_Quench_Message_hdr *hdr,
                                      uint16_t length, proto_ptr_t *ptrs) {
  char *payload = (char *) (hdr + 1);
  // The source network and address of the original datagram's data.
  copy(&payload, (char *) ptrs->ip_ptr, 28);

  // Set type to 4
  hdr->type = 4;

  // Set code to 0
  hdr->code = 0;

  // appropriate_process handle(s) this_data
  /* host use this_data */
  // For computing the checksum , the checksum field should be zero
  hdr->checksum = 0;

  // The checksum is the 16-bit one's complement of the one's complement sum of
  // the ICMP message starting with the ICMP Type
  hdr->checksum = u16bit_ones_complement(
      ones_complement_sum((const void *) &hdr->type, length));
}

void fill_icmp_time_exceed_receiver(Time_Exceeded_Message_hdr *hdr,
                                    uint16_t length, int code_value,
                                    proto_ptr_t *ptrs) {
  char *payload = (char *) (hdr + 1);
  // The source network and address from the original datagram's data.
  copy(&payload, (char *) ptrs->ip_ptr, 28);

  // Set type to 11
  hdr->type = 11;

  // 0 = time to live exceeded in transit;
  // 1 = fragment reassembly time exceeded.
  hdr->code = code_value;

  // appropriate_process handle(s) this_data
  /* host use this_data */
  // For computing the checksum , the checksum field should be zero
  hdr->checksum = 0;

  // The checksum is the 16-bit one's complement of the one's complement sum of
  // the ICMP message starting with the ICMP Type
  hdr->checksum = u16bit_ones_complement(
      ones_complement_sum((const void *) &hdr->type, length));
}

void fill_icmp_timestamp_receiver(Timestamp_or_Timestamp_Reply_Message_hdr *hdr,
                                  uint16_t length, int type_value) {
  // Set code to 0
  hdr->code = 0;

  // 14 for timestamp reply message.
  hdr->type = type_value;

  // For computing the checksum , the checksum field should be zero
  hdr->checksum = 0;

  // The checksum is the 16-bit one's complement of the one's complement sum of
  // the ICMP message starting with the ICMP Type
  hdr->checksum = u16bit_ones_complement(
      ones_complement_sum((const void *) &hdr->type, length));
}

void fill_icmp_timestamp_sender(Timestamp_or_Timestamp_Reply_Message_hdr *hdr,
                                uint16_t length, int type_value) {
  // 13 for timestamp message;
  // 14 for timestamp reply message.
  hdr->type = type_value;

  // Set code to 0
  hdr->code = 0;

  // For timestamp message, if code equals 0, an identifier may be zero to help
  // match timestamp and replies.
  if (hdr->code == 0) {
    hdr->identifier = 0;
  }

  // For timestamp message, if code equals 0, a sequence number may be zero to
  // help match timestamp and replies.
  if (hdr->code == 0) {
    hdr->sequence_number = 0;
  }

  // For computing the checksum , the checksum field should be zero
  hdr->checksum = 0;

  // The checksum is the 16-bit one's complement of the one's complement sum of
  // the ICMP message starting with the ICMP Type
  hdr->checksum = u16bit_ones_complement(
      ones_complement_sum((const void *) &hdr->type, length));
}

#endif  // ICMP_GEN_H_
